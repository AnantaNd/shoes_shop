/* eslint-disable react-hooks/exhaustive-deps */
/* eslint-disable react-hooks/rules-of-hooks */
import Head from 'next/head'
import { useEffect, useState } from 'react'
import { FaFilter } from 'react-icons/fa'
import Card from '../../components/Card/Card'
import Filter from '../../components/Filter/Filter'
import Layouts from '../../components/Layouts/Layouts'
import Search from '../../components/Search/Search'
import Section from '../../components/Section/Section'
import style from './Products.module.css'

export default function index({product}) {
  const [data, setData] = useState(product)
  const [openFilter, setOpenFilter] = useState(false)
  const [dataSearch, setDataSearch] = useState('')
  const [sortShoes, setSortShoes] = useState('')
  const [checkRating, setCheckRating] = useState('')
  const [hasDiscount, setHasDiscount] = useState(false)
  const [lastestShoes, setLastestShoes] = useState(false)
  const [brand, setBrand] = useState('')



  const dotPrice =(numb)=>{
    return numb.toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.')
  }
  const priceDisc=(numb, disc)=>{
    const temp = numb/disc
    return parseInt(numb-temp)
  }
  
  // event handlers
  const closeModal =()=>{
    setOpenFilter(false)
    setData(product)
    setCheckRating('')
    setHasDiscount('')
    setBrand('')
    setLastestShoes('')
  }
  const openModal =()=>{
    setOpenFilter(true)
  }
  const handleClearSearch =()=>{
    if(dataSearch!= ''){
      setDataSearch('')
      setData(product)
    }
  }
  const handleRating = (e) =>{
    setCheckRating(e.target.value)
    // console.log(e.target.value)
  }
  const onChangeSearch = (e) => {
    setDataSearch(e.target.value);
  }
  const handleDiscount = (e) => {
    setHasDiscount(e.target.checked);
    // console.log(e.target.checked);
  }
  const handleLastest = (e) => {
    setLastestShoes(e.target.checked);
  }
  const handleBrand = (e) => {
    setBrand(e.target.value);
    // console.log(e.target.value);
  }
  const handleSort = (e) => {
    setSortShoes(e.target.value)
    // console.log(e.target.value);
  }
  
  //search by name shoes
  const searchShoes = (temp) =>{
    if(!dataSearch){
      return temp
    }
    const searchShoes = dataSearch.toLowerCase()
    const foundShoes = temp.filter((shoes)=>shoes.name.toLowerCase().includes(searchShoes) || shoes.brand.toLowerCase().includes(searchShoes))
    return foundShoes
  }
  // filter by rating
  const filterRating = (temp) => {
    if(!checkRating){
      return temp
    }
    const shoesRating = temp.filter((data)=> data.rating == checkRating)
    return shoesRating
  }
  // filter has discount 
  const filterDiscount = (temp) =>{
    if(!hasDiscount){
      return temp
    }
    const shoesDiscount = temp.filter((data)=>data.discount)
    // console.log(shoesDiscount)
    return (shoesDiscount)
  }
  // filter has new collection
  const filterCollection = (temp) =>{
    if(!lastestShoes){
      return temp
    }
    const newCollection = temp.filter((data)=>data.tag)
    return (newCollection)
  }
   // filter by brand
   const filterBrand = (temp) =>{
    if(!brand){
      return temp
    }
    const filterShoes = temp.filter((shoes)=>(shoes.brand == brand))
    return filterShoes
  }
  // select sorting shoes not fix
  // const sortingShoes = (temp) => {
  //   if(!sortShoes){
  //     return temp
  //   }
  //   const sortData = temp.sort((a, b)=> (b.price > a.price ? 1 : -1))
  //   return sortData
  //   // if(sortShoes === 'maxPrice'){
  //   //   const sortData = temp.sort((a, b)=> (b.price > a.price ? 1 : -1))
  //   //   return sortData
  //   // }
  //   // if(sortShoes === 'minPrice'){
  //   //   const sortData = temp.sort((a, b)=> (a.price > b.price ? 1 : -1))
  //   //   return sortData
  //   // }
  // }

  // lifecycle filter data
  useEffect(()=>{
    let filterData = filterBrand(product)
    filterData = searchShoes(filterData)
    filterData = filterRating(filterData)
    filterData = filterDiscount(filterData)
    filterData = filterCollection(filterData)
    setData(filterData)

   
  }, [dataSearch, checkRating, hasDiscount, brand, lastestShoes])

  // useEffect(()=>{
  //   if(!sortShoes){
  //     setData(product)
  //   }else if(sortShoes === 'maxPrice'){
  //     const sorting = data.filter((shoes)=> )
  //     setData(sorting)
  //   }
  //   console.log(data)
  // },[])


  return (
    <Layouts>
      <Head>
        <title>Shoes Shop | Products</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/logo.svg" />
      </Head>
      <div className={style.container}>
        <Section>
          <div className={style.filter}>
            <Search
              onChangeInput={onChangeSearch}
              value={dataSearch}
              onClear={handleClearSearch}
            />
            {/* <Select
              onChangeSelect={handleSort}
              value={sortShoes}
            /> */}
          </div>
          <div className={style.wrapperBtnFilter}>
            <button className={style.btnFilter} onClick={openModal}><FaFilter/> Filter</button>
            <button className={style.btnClear} onClick={closeModal}>Clear Filter</button>
          </div>
          <p className={style.length_products}>display <span>{data?.length} products</span> from {product?.length} products</p>
          {!openFilter? ''
            :
            <Filter 
              handleCloseFilter={()=>setOpenFilter(false)}
              onRating={handleRating}
              onDiscount={handleDiscount}
              onBrand={handleBrand}
              onLastest={handleLastest}
            />
          }
        </Section>
        <Section>
            <div className={style.products}>
              {/* <ReactPaginate
              /> */}
              {data?.length != 0 && data?.map((shoes, i) =>
                <Card key={i}
                  idProduct={shoes.id}
                  tagNew={shoes.tag}
                  img={shoes.img}
                  disc={shoes.discount}
                  name={shoes.name}
                  price={dotPrice(shoes.price)}
                  priceAftDisc={dotPrice(priceDisc(shoes.price, shoes.discount))}
                  ratting={shoes.rating}
                  brand={shoes.brand}
                />
              )}
            </div>
        </Section>
        </div>
    </Layouts>
  )
}
export async function getStaticProps(){
  try{
    const res = await fetch('http://localhost:3000/api/product')
    const product = await res.json()
    return {
      props:{
        product
      }
    }
  }
  catch(err){
    console.error(err)
  }
  return {
    props:{
      product
    }
  }
}
